#!/usr/bin/env python3

import argparse
import os
import re
import subprocess
import sys
import tempfile

def run(command):
	sys.stderr.write(f'running: {command}\n')
	if os.system(command) != 0:
		sys.stderr.write(f'failed\n')
		sys.exit(1)

##################
## Command Line ##
##################

parser = argparse.ArgumentParser(
	description='Rocketchip - ChIP-seq pipeline')
parser.add_argument('--project', type=str, metavar='<path>', required=True,
	help='path to project directory')
parser.add_argument('--force', action='store_true', required=False,
	help='overwrite project if it exists')
parser.add_argument('--genome', type=str, metavar='<genome>', required=True,
	help='name of genome at UCSC (e.g. sacCer3)')
parser.add_argument('--masked', action='store_true', required=False,
	help='use masked genome [defaults to naked]')
parser.add_argument('--sra', type=str, metavar='<str>', required=True,
	nargs='+', help='SRA ids (e.g. SRR12926698) or file of ids')
parser.add_argument('--data', type=str, metavar='<str>', required=False,
	help='override current ROCKETCHIP_DATA enviornment variable')
parser.add_argument('--src', type=str, metavar='<str>', required=False,
	help='override current ROCKETCHIP_SRC enviornment variable')
parser.add_argument('--broad', action='store_true', required=False,
	help='find broad peakss [default is narrow]')
arg = parser.parse_args()

CWD = os.path.abspath('.')

#################
## Environment ##
#################

# Data Files Location #
if arg.data: os.environ['ROCKETCHIP_DATA'] = arg.data
if 'ROCKETCHIP_DATA' not in os.environ:
	sys.stderr.write('Error: set ROCKETCHIP_DATA or use --data\n')
	sys.exit(1)
if not os.path.isdir(os.environ['ROCKETCHIP_DATA']):
	sys.stderr.write(f'Error: environ["ROCKETCHIP_DATA"] is not a directory\n')
	sys.exit(1)
DATA = os.path.abspath(os.environ['ROCKETCHIP_DATA'])

sys.stderr.write(f'DATA: {DATA}\n')

# Source Code Location #
if arg.src: os.environ['ROCKETCHIP_SRC'] = arg.src
if 'ROCKETCHIP_SRC' not in os.environ:
	sys.stderr.write('Error: set ROCKETCHIP_SRC or use --src\n')
	sys.exit(1)
testfile = f'{os.environ["ROCKETCHIP_SRC"]}/paired_end_snakefile'
if not os.path.isfile(testfile):
	sys.stderr.write(f'Error: "{testfile}" not found\n')
	sys.exit(1)
SRC = os.path.abspath(os.environ['ROCKETCHIP_SRC'])

sys.stderr.write(f'SRC: {SRC}\n')

#######################
## Genome Management ##
#######################

GENOME_DIR = f'{DATA}/{arg.genome}'
os.makedirs(GENOME_DIR, exist_ok=True)
if arg.masked:
	TGZ = 'chromFaMasked.tar.gz'
	SEQ = f'{arg.genome}.masked.fa'
	IDX = f'{arg.genome}.masked.fa.bwt'
else:
	TGZ = 'chromFa.tar.gz'
	SEQ = f'{arg.genome}.fa'
	IDX = f'{arg.genome}.fa.bwt'

# Download and index genome
GENOME_SEQ = f'{GENOME_DIR}/{SEQ}'
if os.path.isfile(GENOME_SEQ):
	sys.stderr.write(f'using local copy: {arg.genome}\n')
else:
	sys.stderr.write(f'Downloading {TGZ}\n')
	TEMPDIR = tempfile.mkdtemp()
	os.mkdir(f'{TEMPDIR}/files')
	BASE = 'https://hgdownload.soe.ucsc.edu/goldenPath' # USA
	URL = f'{BASE}/{arg.genome}/bigZips/{TGZ}'
	run(f'wget {URL} -O {TEMPDIR}/{TGZ}')
	run(f'tar -zxf {TEMPDIR}/{TGZ} -C {TEMPDIR}/files')
	run(f'cat {TEMPDIR}/files/* > {GENOME_SEQ}')
	run(f'rm -rf {TEMPDIR}')
	os.chdir(GENOME_DIR)
	run(f'bwa index -a bwtsw {GENOME_SEQ}')

####################
## SRA Management ##
####################

SRA_DIR = f'{DATA}/SRA'
os.makedirs(f'{SRA_DIR}/paired', exist_ok=True)
os.makedirs(f'{SRA_DIR}/single', exist_ok=True)

# Get list of SRAs
sras = []
if arg.sra:
	for sra in arg.sra:
		if os.path.isfile(sra):
			with open(sra) as fp:
				for line in fp.readlines():
					line = line.rstrip()
					sras.append(line)
		else:
			sras.append(sra)

read_type = {'paired':0, 'single':0}

# Download and process SRAs
for sra in sras:
	PAIRED = f'{SRA_DIR}/paired/{sra}/{sra}.sra'
	SINGLE = f'{SRA_DIR}/single/{sra}/{sra}.sra'
	layout = None
	if os.path.isfile(PAIRED):
		sys.stderr.write(f'using local copy: {sra}\n')
		layout = 'paired'
	elif os.path.isfile(SINGLE):
		sys.stderr.write(f'using local copy: {sra}\n')
		layout = 'single'
	else:
		# determine layout (paired or single)
		url = f'https://trace.ncbi.nlm.nih.gov/Traces/sra/?run={sra}'
		html = subprocess.run(['wget', '-O', '-', url],
			stdout=subprocess.PIPE).stdout.decode('utf-8')
		pat = 'Layout(.+)Biosample'
		match = re.search(pat, html, re.DOTALL)
		if match:
			if   re.search('SINGLE', match.group()): layout = 'single'
			elif re.search('PAIRED', match.group()): layout = 'paired'
			else:
				print(f'could not assess paired/single for {sra}, aborting')
				sys.exit(1)
		
		# retrieve and process SRA file
		run(f'prefetch {sra} -O {SRA_DIR}/{layout}/{sra}')
		run(f'mv {SRA_DIR}/{layout}/{sra}/{sra}/{sra}.sra {SRA_DIR}/{layout}/{sra}')
		run(f'rm -rf {SRA_DIR}/{layout}/{sra}/{sra}')
		os.chdir(f'{SRA_DIR}/{layout}/{sra}')
		if layout == 'paired':
			run(f'fastq-dump {sra}.sra --split-files --gzip --outdir .')
		else:
			run(f'fastq-dump {sra}.sra --gzip --outdir .')
	read_type[layout] += 1

# Determine if the all of the reads are paired or single
LAYOUT = None
if   read_type['paired'] == len(sras): LAYOUT = 'paired'
elif read_type['single'] == len(sras): LAYOUT = 'single'
else:
	print(f'ERROR: read types inconsistent {read_type}')
	sys.exit(1)
print('using layout', LAYOUT)

#############
## Project ##
#############

os.chdir(CWD)
PROJECT = os.path.abspath(arg.project)
PEAKS = 'broad' if arg.broad else 'narrow'
SNAKEFILE = f'{LAYOUT}_{PEAKS}'

# Project directory legal?

for restricted in [DATA, SRC]:
	if PROJECT == restricted:
		sys.stderr.write(f'Error: no projects allowed in {restricted}\n')
		sys.exit(1)

if os.path.isfile(f'{PROJECT}/Snakefile') and not arg.force:
	sys.stderr.write(f'Error: Snakefile already exists at {PROJECT}\n')
	sys.stderr.write('use --force to override\n')
	sys.exit(1)

# Create subdirectories

os.makedirs(PROJECT, exist_ok=True)
os.chdir(PROJECT)
PDIRS = ['00_logs', '01_raw_data', '02_fastqc_analysis', '03_sam_files',
	'04_bam_files', '05_bigwig_files', '06_macs2_peaks']
for d in PDIRS: os.makedirs(d, exist_ok=True)
run(f'cp {SRC}/snakefiles/{SNAKEFILE} Snakefile')

# Create samples.yaml

with open('samples.yaml', 'w') as fp:
	fp.write('---\nsamples:\n')
	for sra in sras:
		fp.write(f'  - {sra}\n')

# Fill 01_raw_data

run(f'ln -sf {GENOME_DIR}/{SEQ} 01_raw_data/genome.fa')
gen_ext = ['.amb', '.ann', '.bwt', '.pac', '.sa']
for ext in gen_ext:
	run(f'ln -sf {GENOME_DIR}/{SEQ}{ext} 01_raw_data/genome{ext}')

for sra in sras:
	if layout == 'paired':
		run(f'ln -sf {SRA_DIR}/{layout}/{sra}/{sra}_1.fastq.gz 01_raw_data')
		run(f'ln -sf {SRA_DIR}/{layout}/{sra}/{sra}_2.fastq.gz 01_raw_data')
	else:
		run(f'ln -sf {SRA_DIR}/{layout}/{sra}/{sra}.fastq.gz 01_raw_data')

# Finished with setup

print(f"""

ROCKETCHIP has completed setup. To run analysis type the following:

	chdir {PROJECT}
	snakemake

""")
