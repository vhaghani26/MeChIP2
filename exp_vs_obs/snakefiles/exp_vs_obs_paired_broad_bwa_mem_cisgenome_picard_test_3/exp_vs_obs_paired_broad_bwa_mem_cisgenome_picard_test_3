'''
Author: Viktoria_Haghani_and_Aditi_Goyal_and_Alan_Zhang
Project: exp_vs_obs_paired_broad_bwa_mem_cisgenome_picard
Genome:
  Name: genome
  Location: /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome.fa
Reads:
  Samples:
    grp1:
    - /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/exp_a
    - /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/exp_b
  Controls:
    ctl1:
    - /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/input
Readtype: paired
Peaktype: broad
Aligner: bwa_mem
Deduplicator: picard
Peakcaller: cisgenome
Threads: 1
'''

wildcard_constraints:
	sample='[a-zA-Z0-9_]+',
	control='[a-zA-Z0-9_]+'

Samples = {
	'grp1': ['exp_a', 'exp_b'],
}
Controls = {
	'ctl1': ['input'],
}

reads_path = {
	'exp_a': ['/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/exp_a_1.fastq.gz', '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/exp_a_2.fastq.gz'],
	'exp_b': ['/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/exp_b_1.fastq.gz', '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/exp_b_2.fastq.gz'],
	'input': ['/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/input_1.fastq.gz', '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/input_2.fastq.gz'],
}

src = '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip'

sample_group_names = [group for group in Samples]
control_group_names = [group for group in Controls]
samples = []
for group in sample_group_names:
	for sample in Samples[group]: samples.append(sample)
controls = []
for group in control_group_names:
	for sample in Controls[group]: controls.append(sample)

rule all:
	input:
		expand("02_fastqc_analysis/{sample}_1_fastqc.zip", sample=samples),
		expand("02_fastqc_analysis/{sample}_2_fastqc.zip", sample=samples),
		expand("02_fastqc_analysis/{sample}_1_fastqc.html", sample=samples),
		expand("02_fastqc_analysis/{sample}_2_fastqc.html", sample=samples),
		expand("02_fastqc_analysis/{sample}_1_fastqc.zip", sample=controls),
		expand("02_fastqc_analysis/{sample}_2_fastqc.zip", sample=controls),
		expand("02_fastqc_analysis/{sample}_1_fastqc.html", sample=controls),
		expand("02_fastqc_analysis/{sample}_2_fastqc.html", sample=controls),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.zip", sample=samples),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.html", sample=samples),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.zip", sample=controls),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.html", sample=controls),

		expand("06_cisgenome_peaks/{sample}_{control}_peak.cod",
			sample=sample_group_names, control=control_group_names),

		expand("05_bigwig_files/{sample}.bw", sample=samples)

rule make_directories:
	output:
		directory("00_logs/"),
		directory("01_raw_data/"),
		directory("02_fastqc_analysis/"),
		directory("03_sam_files/"),
		directory("04_bam_files/"),
		directory("05_bigwig_files/"),
		directory("06_cisgenome_peaks/")
	shell:
		"mkdir 00_logs 01_raw_data 02_fastqc_analysis 03_sam_files 04_bam_files "
		"05_bigwig_files 06_cisgenome_peaks"

rule copy_genome:
	input: "/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome.fa"
	output: "/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome/genome.fa"
	log: "00_logs/copy_genome.log"
	run:
		shell("mkdir '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome' -p")
		shell("cp '{input}' '{output}'")

rule index_genome:
	input: "/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome/genome.fa"
	output:
		fa = "/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome/bwa_indexed_genome/genome.fa",
		indexers = multiext("/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome/bwa_indexed_genome/genome", ".amb", ".ann", ".bwt", ".pac", ".sa")
	log: "00_logs/index_genome.log"
	run:
		shell("bwa index -p '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome/bwa_indexed_genome/genome' -a bwtsw '{input}' 2> '{log}'")
		shell("ln -sf '{input}' '{output.fa}'")
		
rule link_indexed_genome:
	input: multiext("/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome/bwa_indexed_genome/genome", ".amb", ".ann", ".bwt", ".pac", ".sa", ".fa")
	output: multiext("01_raw_data/genome", ".amb", ".ann", ".bwt", ".pac", ".sa", ".fa")
	log: "00_logs/link_indexed_genome.log"
	run:
		shell("ln -sf '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome/bwa_indexed_genome/genome.amb' '01_raw_data/genome.amb' 2> {log}")
		shell("ln -sf '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome/bwa_indexed_genome/genome.ann' '01_raw_data/genome.ann'")
		shell("ln -sf '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome/bwa_indexed_genome/genome.bwt' '01_raw_data/genome.bwt'")
		shell("ln -sf '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome/bwa_indexed_genome/genome.pac' '01_raw_data/genome.pac'")
		shell("ln -sf '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome/bwa_indexed_genome/genome.sa' '01_raw_data/genome.sa'")
		shell("ln -sf '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/paired_broad/test_3/genome/bwa_indexed_genome/genome.fa' '01_raw_data/genome.fa'")

def get_path_1(wildcards, paths = reads_path):
	return paths[wildcards.sample][0]
	
def get_path_2(wildcards, paths = reads_path):
	return paths[wildcards.sample][1]
	
rule link_reads:
	input:
		r1 = get_path_1,
		r2 = get_path_2
	output:
		o1 = "01_raw_data/{sample}_1.fastq.gz",
		o2 = "01_raw_data/{sample}_2.fastq.gz"
	log:
		r1 = "00_logs/{sample}_link_reads_1.log",
		r2 = "00_logs/{sample}_link_reads_2.log"
	run:
		shell("ln -sf '{input.r1}' '{output.o1}' 2> '{log.r1}'")
		shell("ln -sf '{input.r2}' '{output.o2}' 2> '{log.r2}'")

rule fastqc_preprocessing:
	input:
		r1 = "01_raw_data/{sample}_1.fastq.gz",
		r2 = "01_raw_data/{sample}_2.fastq.gz"
	output:
		"02_fastqc_analysis/{sample}_1_fastqc.html",
		"02_fastqc_analysis/{sample}_1_fastqc.zip",
		"02_fastqc_analysis/{sample}_2_fastqc.html",
		"02_fastqc_analysis/{sample}_2_fastqc.zip"
	log:
		r1 = "00_logs/{sample}_fastqc_precheck_r1.log",
		r2 = "00_logs/{sample}_fastqc_precheck_r2.log"
	run:
		shell("fastqc '{input.r1}' --outdir 02_fastqc_analysis/ 2> '{log.r1}'")
		shell("fastqc '{input.r2}' --outdir 02_fastqc_analysis/ 2> '{log.r2}'")

rule align_reads:
	input:
		genome = multiext("01_raw_data/genome", ".amb", ".ann", ".bwt", ".pac", ".sa"),
		r1 = "01_raw_data/{sample}_1.fastq.gz",
		r2 = "01_raw_data/{sample}_2.fastq.gz"
	output: "03_sam_files/{sample}.sam"
	log: "00_logs/{sample}_align_reads_err.log"
	shell:
		"bwa mem -t 1 '01_raw_data/genome' '{input.r1}' '{input.r2}' > '{output}' "
		"2> '{log}'"

rule sam_to_bam:
	input: "03_sam_files/{sample}.sam"
	output: "04_bam_files/{sample}.bam"
	log: "00_logs/{sample}_sam_to_bam.log"
	shell: "samtools view -@ 1 -Sb '{input}' > '{output}' 2> '{log}'"

rule sam_fixmate:
	input: "04_bam_files/{sample}.bam"
	output: "04_bam_files/{sample}.fixmate.bam"
	log: "00_logs/{sample}_sam_fixmate.log"
	shell: "samtools fixmate -@ 1 -rcm -O bam '{input}' '{output}' 2> '{log}'"
		
rule sam_sort:
	input: "04_bam_files/{sample}.fixmate.bam"
	output: "04_bam_files/{sample}.sorted.fixmate.bam"
	log: "00_logs/{sample}_sam_sort.log"
	shell: "samtools sort -@ 1 -O bam '{input}' > '{output}' 2> '{log}'"

rule markdup:
	input: "04_bam_files/{sample}.sorted.fixmate.bam"
	output: "04_bam_files/{sample}.sorted.dedup.bam"
	log: "00_logs/{sample}_sam_markdup.log"
	run:
		shell("picard MarkDuplicates --REMOVE_DUPLICATES true -I '{input}' "
		"-M '{wildcards.sample}.dup_metrics' -O '{output}' 2> '{log}'")
		shell("mv '{wildcards.sample}.dup_metrics' 04_bam_files/")

rule bam_index:
	input: "04_bam_files/{sample}.sorted.dedup.bam"
	output: "04_bam_files/{sample}.sorted.dedup.bam.bai"
	log: "00_logs/{sample}_bam_index.log"
	shell: "samtools index -@ 1 '{input}' 2> '{log}'"

rule bam_to_bigwig:
	input:
		index = "04_bam_files/{sample}.sorted.dedup.bam.bai",
		bam = "04_bam_files/{sample}.sorted.dedup.bam"
	output: "05_bigwig_files/{sample}.bw"
	log: "00_logs/{sample}_bam_to_bigwig.log"
	shell:
		"bamCoverage -b '{input.bam}' -o '{output}' 2> '{log}'"

rule bam_to_sam:
	input: "04_bam_files/{sample}.sorted.dedup.bam"
	output: "03_sam_files/{sample}.sorted.dedup.sam"
	log: "00_logs/{sample}_bam_to_sam.log"
	shell: "samtools view -@ 1 '{input}' > '{output}' 2> '{log}'"
		
rule sam_to_aln:
	input: "03_sam_files/{sample}.sorted.dedup.sam"
	output: "06_cisgenome_files/{sample}.aln"
	log: "00_logs/{sample}_sam_to_aln.log"
	shell: "'{src}'/tools/sam2aln -i '{input}' > '{output}' 2> '{log}'"

def sample_group(wildcards):
	group = Samples[wildcards.sample]
	return expand("06_cisgenome_files/{sample}.aln", sample = group)

def control_group(wildcards):
	group = Controls[wildcards.control]
	return expand("06_cisgenome_files/{sample}.aln", sample = group)
		
rule write_filelist:
	input:
		s = sample_group,
		c = control_group
	output: "06_cisgenome_files/{sample}_{control}_filelist.txt"
	run:
		for sample in input.s: shell("echo \'{sample}\t1\' >> '{output}'")
		for control in input.c: shell("echo \'{control}\t0\' >> '{output}'")

rule call_peaks:	
	input: "06_cisgenome_files/{sample}_{control}_filelist.txt"
	output:
		multiext("06_cisgenome_peaks/{sample}_{control}", "_peak.cod", "_log2fc.bar",
			"_t.bar")
	log: "00_logs/{sample}_{control}_cisgenome_peaks.log"
	shell:
		"seqpeak -i '{input}' -d 06_cisgenome_peaks -o '{wildcards.sample}_{wildcards.control}' "
		"2> '{log}'"

rule fastqc_postprocessing:
	input:
		"04_bam_files/{sample}.sorted.dedup.bam"
	output:
		"02_fastqc_analysis/{sample}.sorted.dedup_fastqc.html",
		"02_fastqc_analysis/{sample}.sorted.dedup_fastqc.zip"
	log:
		"00_logs/{sample}_fastqc_postprocessing.log"
	shell:
		"fastqc '{input}' --outdir 02_fastqc_analysis/ 2> '{log}'"
