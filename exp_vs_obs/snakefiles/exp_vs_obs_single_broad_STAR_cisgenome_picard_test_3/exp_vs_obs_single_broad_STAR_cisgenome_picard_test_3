'''
Author: Viktoria_Haghani_and_Aditi_Goyal_and_Alan_Zhang
Project: exp_vs_obs_single_broad_STAR_cisgenome_picard
Genome:
  Name: genome
  Location: ../seq_data/single_broad/test_3/genome.fa
Reads:
  Samples:
    grp1:
    - ../seq_data/single_broad/test_3/exp_a
    - ../seq_data/single_broad/test_3/exp_b
  Controls:
    ctl1:
    - ../seq_data/single_broad/test_3/input
Readtype: single
Peaktype: broad
Aligner: STAR
Deduplicator: picard
Peakcaller: cisgenome
Threads: 1
'''

wildcard_constraints:
	sample='[a-zA-Z0-9_]+',
	control='[a-zA-Z0-9_]+'

Samples = {
	'grp1': ['exp_a', 'exp_b'],
}
Controls = {
	'ctl1': ['input'],
}

reads_path = {
	'exp_a': '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/project_files/../seq_data/single_broad/test_3/exp_a.fastq.gz',
	'exp_b': '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/project_files/../seq_data/single_broad/test_3/exp_b.fastq.gz',
	'input': '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/project_files/../seq_data/single_broad/test_3/input.fastq.gz',
}

src = '/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip'

sample_group_names = [group for group in Samples]
control_group_names = [group for group in Controls]
samples = []
for group in sample_group_names:
	for sample in Samples[group]: samples.append(sample)
controls = []
for group in control_group_names:
	for sample in Controls[group]: controls.append(sample)

rule all:
	input:
		expand("02_fastqc_analysis/{sample}_fastqc.zip", sample=samples),
		expand("02_fastqc_analysis/{sample}_fastqc.html", sample=samples),
		expand("02_fastqc_analysis/{sample}_fastqc.zip", sample=controls),
		expand("02_fastqc_analysis/{sample}_fastqc.html", sample=controls),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.zip", sample=samples),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.html", sample=samples),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.zip", sample=controls),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.html", sample=controls),

		expand("06_cisgenome_peaks/{sample}_{control}_peak.cod",
			sample=sample_group_names, control=control_group_names),

		expand("05_bigwig_files/{sample}.bw", sample=samples)

rule make_directories:
	output:
		directory("00_logs/"),
		directory("01_raw_data/"),
		directory("02_fastqc_analysis/"),
		directory("03_sam_files/"),
		directory("04_bam_files/"),
		directory("05_bigwig_files/"),
		directory("06_cisgenome_peaks/")
	shell:
		"mkdir 00_logs 01_raw_data 02_fastqc_analysis 03_sam_files 04_bam_files "
		"05_bigwig_files 06_cisgenome_peaks"

rule copy_genome:
	input: "/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome.fa"
	output: "/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/genome.fa"
	log: "00_logs/copy_genome.log"
	run:
		shell("mkdir /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome -p")
		shell("cp {input} {output}")

rule index_genome:
	input: "/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/genome.fa"
	output:
		out = directory("/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/STAR_indexed_genome"),
		indexers = multiext("/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/STAR_indexed_genome/", "chrLength.txt",  "chrNameLength.txt",  "chrName.txt",  "chrStart.txt",  "Genome", "genomeParameters.txt",  "Log.out",  "SA",  "SAindex")
	log: "00_logs/index_genome.log"
	shell:
		"STAR --runMode genomeGenerate --genomeDir {output.out} "
		"--genomeFastaFiles {input} 2> {log}"

rule link_indexed_genome:
	input:
		indexers = multiext("/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/STAR_indexed_genome/", "chrLength.txt",  "chrNameLength.txt",  "chrName.txt",  "chrStart.txt",  "Genome", "genomeParameters.txt",  "Log.out",  "SA",  "SAindex"),
		fa = "/mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/genome.fa"
	output:
		directory("01_raw_data/genome/"),
		indexers = multiext("01_raw_data/genome/", "chrLength.txt",  "chrNameLength.txt",  "chrName.txt",  "chrStart.txt",  "Genome", "genomeParameters.txt",  "Log.out",  "SA",  "SAindex"),
		fa = "01_raw_data/genome/genome.fa"
	log: "00_logs/link_indexed_genome.log"
	run:
		shell("mkdir -p 01_raw_data/genome")
		shell("ln -sf /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/STAR_indexed_genome/chrLength.txt 01_raw_data/genome/chrLength.txt 2> {log}")
		shell("ln -sf /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/STAR_indexed_genome/chrNameLength.txt 01_raw_data/genome/chrNameLength.txt")
		shell("ln -sf /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/STAR_indexed_genome/chrName.txt 01_raw_data/genome/chrName.txt")
		shell("ln -sf /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/STAR_indexed_genome/chrStart.txt 01_raw_data/genome/chrStart.txt")
		shell("ln -sf /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/STAR_indexed_genome/Genome 01_raw_data/genome/Genome")
		shell("ln -sf /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/STAR_indexed_genome/genomeParameters.txt 01_raw_data/genome/genomeParameters.txt")
		shell("ln -sf /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/STAR_indexed_genome/Log.out 01_raw_data/genome/Log.out")
		shell("ln -sf /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/STAR_indexed_genome/SA 01_raw_data/genome/SA")
		shell("ln -sf /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/STAR_indexed_genome/SAindex 01_raw_data/genome/SAindex")
		shell("ln -sf /mnt/c/Users/Viki Haghani/Documents/Github/rocketchip/exp_vs_obs/seq_data/single_broad/test_3/genome/genome.fa 01_raw_data/genome/genome.fa")

def get_path(wildcards, paths = reads_path):
	return paths[wildcards.sample]

rule link_reads:
	input: get_path
	output: "01_raw_data/{sample}.fastq.gz"
	log: "00_logs/{sample}_link_reads.log"
	shell:
		"ln -sf {input} {output} 2> {log}"

rule fastqc_preprocessing:
	input:
		"01_raw_data/{sample}.fastq.gz"
	output:
		"02_fastqc_analysis/{sample}_fastqc.html",
		"02_fastqc_analysis/{sample}_fastqc.zip"
	log:
		"00_logs/{sample}_fastqc_precheck.log"
	shell:
		"fastqc {input} --outdir 02_fastqc_analysis/ 2> {log}"

rule align_reads:
	input:
		genome = "01_raw_data/genome",
		r = "01_raw_data/{sample}.fastq.gz"
	output: "03_sam_files/{sample}.sam"
	log: "00_logs/{sample}_align_reads_err.log"
	run:
		shell("STAR --runThreadN 1 --genomeDir {input.genome} "
		"--readFilesIn {input.r} --readFilesCommand gunzip -c "
		"--outFileNamePrefix {wildcards.sample} --outStd SAM > {output} 2> {log}")
		shell("mv {wildcards.sample}Log.* {wildcards.sample}SJ.out.tab 03_sam_files/")


rule sam_to_bam:
	input: "03_sam_files/{sample}.sam"
	output: "04_bam_files/{sample}.bam"
	log: "00_logs/{sample}_sam_to_bam.log"
	shell: "samtools view -@ 1 -Sb {input} > {output} 2> {log}"

rule sam_fixmate:
	input: "04_bam_files/{sample}.bam"
	output: "04_bam_files/{sample}.fixmate.bam"
	log: "00_logs/{sample}_sam_fixmate.log"
	shell: "samtools fixmate -@ 1 -rcm -O bam {input} {output} 2> {log}"
		
rule sam_sort:
	input: "04_bam_files/{sample}.fixmate.bam"
	output: "04_bam_files/{sample}.sorted.fixmate.bam"
	log: "00_logs/{sample}_sam_sort.log"
	shell: "samtools sort -@ 1 -O bam {input} > {output} 2> {log}"

rule markdup:
	input: "04_bam_files/{sample}.sorted.fixmate.bam"
	output: "04_bam_files/{sample}.sorted.dedup.bam"
	log: "00_logs/{sample}_sam_markdup.log"
	run:
		shell("picard MarkDuplicates --REMOVE_DUPLICATES true -I {input} "
		"-M {wildcards.sample}.dup_metrics -O {output} 2> {log}")
		shell("mv {wildcards.sample}.dup_metrics 04_bam_files/")

rule bam_index:
	input: "04_bam_files/{sample}.sorted.dedup.bam"
	output: "04_bam_files/{sample}.sorted.dedup.bam.bai"
	log: "00_logs/{sample}_bam_index.log"
	shell: "samtools index -@ 1 {input} 2> {log}"

rule bam_to_bigwig:
	input:
		index = "04_bam_files/{sample}.sorted.dedup.bam.bai",
		bam = "04_bam_files/{sample}.sorted.dedup.bam"
	output: "05_bigwig_files/{sample}.bw"
	log: "00_logs/{sample}_bam_to_bigwig.log"
	shell:
		"bamCoverage -b {input.bam} -o {output} 2> {log}"

rule bam_to_sam:
	input: "04_bam_files/{sample}.sorted.dedup.bam"
	output: "03_sam_files/{sample}.sorted.dedup.sam"
	log: "00_logs/{sample}_bam_to_sam.log"
	shell: "samtools view -@ 1 {input} > {output} 2> {log}"
		
rule sam_to_aln:
	input: "03_sam_files/{sample}.sorted.dedup.sam"
	output: "06_cisgenome_files/{sample}.aln"
	log: "00_logs/{sample}_sam_to_aln.log"
	shell: "{src}/tools/sam2aln -i {input} > {output} 2> {log}"

def sample_group(wildcards):
	group = Samples[wildcards.sample]
	return expand("06_cisgenome_files/{sample}.aln", sample = group)

def control_group(wildcards):
	group = Controls[wildcards.control]
	return expand("06_cisgenome_files/{sample}.aln", sample = group)
		
rule write_filelist:
	input:
		s = sample_group,
		c = control_group
	output: "06_cisgenome_files/{sample}_{control}_filelist.txt"
	run:
		for sample in input.s: shell("echo \'{sample}\t1\' >> {output}")
		for control in input.c: shell("echo \'{control}\t0\' >> {output}")

rule call_peaks:	
	input: "06_cisgenome_files/{sample}_{control}_filelist.txt"
	output:
		multiext("06_cisgenome_peaks/{sample}_{control}", "_peak.cod", "_log2fc.bar",
			"_t.bar")
	log: "00_logs/{sample}_{control}_cisgenome_peaks.log"
	shell:
		"seqpeak -i {input} -d 06_cisgenome_peaks -o {wildcards.sample}_{wildcards.control} "
		"2> log"

rule fastqc_postprocessing:
	input:
		"04_bam_files/{sample}.sorted.dedup.bam"
	output:
		"02_fastqc_analysis/{sample}.sorted.dedup_fastqc.html",
		"02_fastqc_analysis/{sample}.sorted.dedup_fastqc.zip"
	log:
		"00_logs/{sample}_fastqc_postprocessing.log"
	shell:
		"fastqc {input} --outdir 02_fastqc_analysis/ 2> {log}"
