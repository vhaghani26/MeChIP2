rule bam_to_sam:
	input: "04_bam_files/{sample}.sorted.dedup.bam"
	output: "03_sam_files/{sample}.sorted.dedup.sam"
	log: "00_logs/{sample}_bam_to_sam.log"
	shell: "samtools view -@ THREADS {input} > {output} 2> {log}"
		
rule sam_to_aln:
	input: "03_sam_files/{sample}.sorted.dedup.sam"
	output: "06_cisgenome_files/{sample}.aln"
	log: "00_logs/{sample}_sam_to_aln.log"
	shell: "./sam2aln -i {input} > {output} 2> {log}"

def get_sample_groups(wildcards):
	if len(wildcards.sample.split('_')) == 1:
		return "06_cisgenome_files/{sample}.aln"
	else:
		exp = wildcards.sample.split('_')
		return expand("06_cisgenome_files/{sample}.aln", sample=exp)

def get_control_groups(wildcards):
	if len(wildcards.control.split('_')) == 1:
		return "06_cisgenome_files/{control}.aln"
	else:
		exp = wildcards.control.split('_')
		return expand("06_cisgenome_files/{control}.aln", sample=exp)
		
rule write_filelist:
	input:
		s = get_sample_groups,
		c = get_control_groups
	output: "06_cisgenome_files/{sample}_{control}_filelist.txt"
	run:
		if type(input.s) is snakemake.io.Namedlist:
			for sample in input.s:
				shell("echo \'{sample}\t1\' >> {output}")
		else:
			shell("echo \'{input.s}\t1\' >> {output}")
		if type(input.c) is snakemake.io.Namedlist:
			for control in input.c:
				shell("echo \'{control}\t0\' >> {output}")
		else:
			shell("echo \'{input.c}\t0\' >> {output}")

rule call_peaks:	
	input: "06_cisgenome_files/{sample}_{control}_filelist.txt"
	output:
		multiext("06_cisgenome_peaks/{sample}_{control}", "_peak.cod", "_log2fc.bar",
			"_t.bar")
	log: "00_logs/{sample}_{control}_cisgenome_peaks.log"
	shell:
		"seqpeak -i {input} -d 06_cisgenome_peaks -o {wildcards.sample}_{wildcards.control} "
		"2> log"
