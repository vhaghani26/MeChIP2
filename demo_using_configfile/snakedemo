wildcard_constraints:
	sample='[a-zA-Z0-9_]+',
	control='[a-zA-Z0-9_]+'

Samples = {
	'grp1': ['exp_a', 'exp_b'],
	'grp2': ['exp_c'],
}
Controls = {
	'ctl1': ['input'],
}

sample_group_names = [group for group in Samples]
control_group_names = [group for group in Controls]
samples = []
for group in sample_group_names:
	for sample in Samples[group]: samples.append(sample)
controls = []
for group in control_group_names:
	for sample in Controls[group]: controls.append(sample)

rule all:
	input:
		expand("02_fastqc_analysis/{sample}_1_fastqc.zip", sample=samples),
		expand("02_fastqc_analysis/{sample}_2_fastqc.zip", sample=samples),
		expand("02_fastqc_analysis/{sample}_1_fastqc.html", sample=samples),
		expand("02_fastqc_analysis/{sample}_2_fastqc.html", sample=samples),
		expand("02_fastqc_analysis/{sample}_1_fastqc.zip", sample=controls),
		expand("02_fastqc_analysis/{sample}_2_fastqc.zip", sample=controls),
		expand("02_fastqc_analysis/{sample}_1_fastqc.html", sample=controls),
		expand("02_fastqc_analysis/{sample}_2_fastqc.html", sample=controls),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.zip", sample=samples),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.html", sample=samples),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.zip", sample=controls),
		expand("02_fastqc_analysis/{sample}.sorted.dedup_fastqc.html", sample=controls),

		expand("06_macs3_peaks/{sample}_{control}_peaks.xls", sample=sample_group_names,
			control=control_group_names),

		expand("05_bigwig_files/{sample}.bw", sample=samples)

rule make_directories:
	output:
		directory("00_logs/"),
		directory("01_raw_data/"),
		directory("02_fastqc_analysis/"),
		directory("03_sam_files/"),
		directory("04_bam_files/"),
		directory("05_bigwig_files/"),
		directory("06_macs3_peaks/")
	shell:
		"mkdir 00_logs 01_raw_data 02_fastqc_analysis 03_sam_files 04_bam_files "
		"05_bigwig_files 06_macs3_peaks"

rule link_genome:
	input: "/home/azhang/rocketchip/demo/01_raw_data/genome.fa"
	output: "01_raw_data/fake_genome.fa"
	log: "00_logs/link_genome.log"
	shell: "ln -sf {input} {output}"

rule index_genome:
	input: "01_raw_data/fake_genome.fa"
	output: multiext("01_raw_data/fake_genome", ".amb", ".ann", ".bwt", ".pac", ".sa")
	log: "00_logs/index_genome.log"
	run:
		shell("bwa index -p fake_genome -a bwtsw {input} 2> {log}")
		shell("mv fake_genome* 01_raw_data/")

rule fastqc_preprocessing:
	input:
		r1 = "01_raw_data/{sample}_1.fastq.gz",
		r2 = "01_raw_data/{sample}_2.fastq.gz"
	output:
		"02_fastqc_analysis/{sample}_1_fastqc.html",
		"02_fastqc_analysis/{sample}_1_fastqc.zip",
		"02_fastqc_analysis/{sample}_2_fastqc.html",
		"02_fastqc_analysis/{sample}_2_fastqc.zip"
	log:
		r1 = "00_logs/{sample}_fastqc_precheck_r1.log",
		r2 = "00_logs/{sample}_fastqc_precheck_r2.log"
	run:
		shell("fastqc {input.r1} --outdir 02_fastqc_analysis/ 2> {log.r1}")
		shell("fastqc {input.r2} --outdir 02_fastqc_analysis/ 2> {log.r2}")

rule align_reads:
	input:
		genome = multiext("01_raw_data/fake_genome", ".amb", ".ann", ".bwt", ".pac", ".sa"),
		r1 = "01_raw_data/{sample}_1.fastq.gz",
		r2 = "01_raw_data/{sample}_2.fastq.gz"
	output: "03_sam_files/{sample}.sam"
	log: "00_logs/{sample}_align_reads_err.log"
	shell:
		"bwa mem -t 1 01_raw_data/fake_genome {input.r1} {input.r2} > {output} "
		"2> {log}"

rule sam_to_bam:
	input: "03_sam_files/{sample}.sam"
	output: "04_bam_files/{sample}.bam"
	log: "00_logs/{sample}_sam_to_bam.log"
	shell: "samtools view -@ 1 -Sb {input} > {output} 2> {log}"

rule sam_fixmate:
	input: "04_bam_files/{sample}.bam"
	output: "04_bam_files/{sample}.fixmate.bam"
	log: "00_logs/{sample}_sam_fixmate.log"
	shell: "samtools fixmate -@ 1 -rcm -O bam {input} {output} 2> {log}"
		
rule sam_sort:
	input: "04_bam_files/{sample}.fixmate.bam"
	output: "04_bam_files/{sample}.sorted.fixmate.bam"
	log: "00_logs/{sample}_sam_sort.log"
	shell: "samtools sort -@ 1 -O bam {input} > {output} 2> {log}"

rule markdup:
	input: "04_bam_files/{sample}.sorted.fixmate.bam"
	output: "04_bam_files/{sample}.sorted.dedup.bam"
	log: "00_logs/{sample}_sam_markdup.log"
	shell: "samtools markdup -@ 1 -r --mode s {input} {output} 2> {log}"

rule bam_index:
	input: "04_bam_files/{sample}.sorted.dedup.bam"
	output: "04_bam_files/{sample}.sorted.dedup.bam.bai"
	log: "00_logs/{sample}_bam_index.log"
	shell: "samtools index -@ 1 {input} 2> {log}"

rule bam_to_bigwig:
	input:
		index = "04_bam_files/{sample}.sorted.dedup.bam.bai",
		bam = "04_bam_files/{sample}.sorted.dedup.bam"
	output: "05_bigwig_files/{sample}.bw"
	log: "00_logs/{sample}_bam_to_bigwig.log"
	shell:
		"bamCoverage -b {input.bam} -o {output} 2> {log}"

def sample_group(wildcards):
	group = Samples[wildcards.sample]
	return expand("04_bam_files/{sample}.sorted.dedup.bam", sample = group)

def control_group(wildcards):
	group = Controls[wildcards.control]
	return expand("04_bam_files/{sample}.sorted.dedup.bam", sample = group)

rule call_peaks:
	input:
		s = sample_group,
		c = control_group	
	output: "06_macs3_peaks/{sample}_{control}_peaks.xls"
	log: "00_logs/{sample}_{control}_macs3_peaks.log"
	run:
		sample_input = ' '.join(input.s)
		control_input = ' '.join(input.c)
		shell("macs3 callpeak -t {sample_input} -c {control_input} -f BAMPE "
			"-n {wildcards.sample}_{wildcards.control} --bdg "
			"--outdir 06_macs3_peaks/  2> {log}")

rule fastqc_postprocessing:
	input:
		"04_bam_files/{sample}.sorted.dedup.bam"
	output:
		"02_fastqc_analysis/{sample}.sorted.dedup_fastqc.html",
		"02_fastqc_analysis/{sample}.sorted.dedup_fastqc.zip"
	log:
		"00_logs/{sample}_fastqc_postprocessing.log"
	shell:
		"fastqc {input} --outdir 02_fastqc_analysis/ 2> {log}"

